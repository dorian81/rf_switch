
RF_Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000204  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000014a  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e8  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000010a  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000fc  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000146  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000290  00000000  00000000  000007f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000a82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	84 c0       	rjmp	.+264    	; 0x10c <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	46 c0       	rjmp	.+140    	; 0xa0 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	a2 d0       	rcall	.+324    	; 0x188 <main>
  44:	a3 c0       	rjmp	.+326    	; 0x18c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <toggle>:
	int remote = PIND >> 4;
	toggle(remote);
}

void toggle(int sw){
	switch(sw){
  48:	84 30       	cpi	r24, 0x04	; 4
  4a:	91 05       	cpc	r25, r1
  4c:	d1 f0       	breq	.+52     	; 0x82 <toggle+0x3a>
  4e:	34 f4       	brge	.+12     	; 0x5c <toggle+0x14>
  50:	81 30       	cpi	r24, 0x01	; 1
  52:	91 05       	cpc	r25, r1
  54:	61 f0       	breq	.+24     	; 0x6e <toggle+0x26>
  56:	02 97       	sbiw	r24, 0x02	; 2
  58:	79 f0       	breq	.+30     	; 0x78 <toggle+0x30>
  5a:	08 95       	ret
  5c:	89 30       	cpi	r24, 0x09	; 9
  5e:	91 05       	cpc	r25, r1
  60:	d1 f0       	breq	.+52     	; 0x96 <toggle+0x4e>
  62:	8a 30       	cpi	r24, 0x0A	; 10
  64:	91 05       	cpc	r25, r1
  66:	d1 f0       	breq	.+52     	; 0x9c <toggle+0x54>
  68:	08 97       	sbiw	r24, 0x08	; 8
  6a:	c9 f4       	brne	.+50     	; 0x9e <toggle+0x56>
  6c:	0f c0       	rjmp	.+30     	; 0x8c <toggle+0x44>
		case 1:{
			PORTB ^= (1 << PINB0);
  6e:	98 b3       	in	r25, 0x18	; 24
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	89 27       	eor	r24, r25
  74:	88 bb       	out	0x18, r24	; 24
			break;
  76:	08 95       	ret
		}
		case 2:{
			PORTB ^= (1 << PINB1);
  78:	98 b3       	in	r25, 0x18	; 24
  7a:	82 e0       	ldi	r24, 0x02	; 2
  7c:	89 27       	eor	r24, r25
  7e:	88 bb       	out	0x18, r24	; 24
			break;
  80:	08 95       	ret
		}
		case 4:{
			PORTB ^= (1 << PINB2);
  82:	98 b3       	in	r25, 0x18	; 24
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	89 27       	eor	r24, r25
  88:	88 bb       	out	0x18, r24	; 24
			break;
  8a:	08 95       	ret
		}
		case 8:{
			PORTB ^= (1 << PINB3);
  8c:	98 b3       	in	r25, 0x18	; 24
  8e:	88 e0       	ldi	r24, 0x08	; 8
  90:	89 27       	eor	r24, r25
  92:	88 bb       	out	0x18, r24	; 24
			break;
  94:	08 95       	ret
		}
		case 9:{
			PORTB = 0x0F;
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	88 bb       	out	0x18, r24	; 24
			break;
  9a:	08 95       	ret
		}
		case 10:{
			PORTB = 0x00;
  9c:	18 ba       	out	0x18, r1	; 24
  9e:	08 95       	ret

000000a0 <__vector_9>:

void toggle(int sw);

int sw_state = 0x00;

ISR(TIMER0_OVF_vect){
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	4f 93       	push	r20
  b0:	5f 93       	push	r21
  b2:	6f 93       	push	r22
  b4:	7f 93       	push	r23
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	int sw = PINC;
  c6:	c3 b3       	in	r28, 0x13	; 19
  c8:	d0 e0       	ldi	r29, 0x00	; 0
	
	if (sw != sw_state){
  ca:	80 91 60 00 	lds	r24, 0x0060
  ce:	90 91 61 00 	lds	r25, 0x0061
  d2:	c8 17       	cp	r28, r24
  d4:	d9 07       	cpc	r29, r25
  d6:	39 f0       	breq	.+14     	; 0xe6 <__vector_9+0x46>
		toggle(sw_state ^ sw);
  d8:	8c 27       	eor	r24, r28
  da:	9d 27       	eor	r25, r29
  dc:	b5 df       	rcall	.-150    	; 0x48 <toggle>
		sw_state = sw;
  de:	d0 93 61 00 	sts	0x0061, r29
  e2:	c0 93 60 00 	sts	0x0060, r28
	}
}
  e6:	ff 91       	pop	r31
  e8:	ef 91       	pop	r30
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	bf 91       	pop	r27
  f0:	af 91       	pop	r26
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	7f 91       	pop	r23
  f8:	6f 91       	pop	r22
  fa:	5f 91       	pop	r21
  fc:	4f 91       	pop	r20
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_1>:

ISR(INT0_vect){
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	int remote = PIND >> 4;
 12e:	80 b3       	in	r24, 0x10	; 16
 130:	82 95       	swap	r24
 132:	8f 70       	andi	r24, 0x0F	; 15
	toggle(remote);
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	88 df       	rcall	.-240    	; 0x48 <toggle>
}
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	7f 91       	pop	r23
 146:	6f 91       	pop	r22
 148:	5f 91       	pop	r21
 14a:	4f 91       	pop	r20
 14c:	3f 91       	pop	r19
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <init>:
		}
	}
}

void init(){
	DDRB = 0x0F;
 15a:	8f e0       	ldi	r24, 0x0F	; 15
 15c:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x00;
 15e:	14 ba       	out	0x14, r1	; 20
	DDRD = 0x00;
 160:	11 ba       	out	0x11, r1	; 17
	
	TCCR0 |= (1<<CS02);
 162:	83 b7       	in	r24, 0x33	; 51
 164:	84 60       	ori	r24, 0x04	; 4
 166:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
 168:	89 b7       	in	r24, 0x39	; 57
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	89 bf       	out	0x39, r24	; 57
	
	MCUCR=0x03;
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	85 bf       	out	0x35, r24	; 53
	GICR |= 1<<INT0;
 172:	8b b7       	in	r24, 0x3b	; 59
 174:	80 64       	ori	r24, 0x40	; 64
 176:	8b bf       	out	0x3b, r24	; 59
	sei();
 178:	78 94       	sei
	
	sw_state = PINC;
 17a:	83 b3       	in	r24, 0x13	; 19
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 61 00 	sts	0x0061, r25
 182:	80 93 60 00 	sts	0x0060, r24
 186:	08 95       	ret

00000188 <main>:
}

int main(void)
{
	init();
 188:	e8 df       	rcall	.-48     	; 0x15a <init>
 18a:	ff cf       	rjmp	.-2      	; 0x18a <main+0x2>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
